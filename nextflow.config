manifest {
    mainScript = 'main.nf'
    nextflowVersion = '>=20.00.0'
}

params{
    // Legacy parameters (maintained for compatibility)
    max_cores = Runtime.runtime.availableProcessors()
    cores = Runtime.runtime.availableProcessors().intdiv(4)
    memory = '12'
    
    // Enhanced configuration management
    outdir = "results"
    help = false
    profile = 'slurm'
    
    // Environment management parameters
    env_mode = 'unified'  // Options: 'unified', 'per_process'
    validate_environments = true
    auto_resolve_conflicts = true
    strict_env_validation = false
    test_env_creation = false
    
    // Resource management parameters
    max_forks = 10
    resource_profile = null  // Auto-detected based on executor
    enable_retry_scaling = true
    max_retry_scaling = 3
    
    // Validation parameters
    validate_resources = true
    validate_databases = true
    strict_validation = false
    
    // Tool and adapter configurations
    adapters = "${projectDir}/assets/illumina_adapter.fa"
    trimming_tool = "trim_galore" // Options: 'fastp', 'flexbar', 'trim_galore'
    quality = "30"
    min_contig_length = 200
    assembler = "hybrid" // Options: 'metaspades', 'megahit', 'hybrid'
    
    // Database paths (required)
    kraken2_db = "/mmfs1/scratch/jacks.local/naveen.duhan/reference_datbases/kraken2_db"
    checkv_db = "/mmfs1/scratch/jacks.local/naveen.duhan/reference_datbases/checkvdb"

    // BLAST database configurations
    blast_options = ['all'] // Options: 'all', 'viruses', 'nt', 'nr'
    blastdb_viruses = "/mmfs1/scratch/jacks.local/naveen.duhan/reference_datbases/ncbi_dbs/nt_viruses/nt_viruses"
    blastdb_nt = "/mmfs1/scratch/jacks.local/naveen.duhan/reference_datbases/ncbi_dbs/nt/nt"
    blastdb_nr = "/mmfs1/scratch/jacks.local/naveen.duhan/reference_datbases/ncbi_dbs/nr/nr"
    diamonddb = "/mmfs1/scratch/jacks.local/naveen.duhan/reference_datbases/diamond_db/nr.dmnd"
    blastx_tool = "diamond" // Options: 'diamond', 'blastx' - DIAMOND is much faster

    // Enhanced SLURM partition configuration (can be overridden)
    partitions = [
        compute: 'compute',
        bigmem: 'bigmem',
        gpu: 'gpu', 
        quick: 'quickq'
    ]
    default_partition = 'compute'
    
    // Partition selection configuration
    partition_selection_strategy = 'intelligent' // Options: 'intelligent', 'static', 'user_defined'
    enable_partition_validation = true
    
    // Partition thresholds for intelligent selection
    partition_thresholds = [
        bigmem_memory_gb: 128,
        quick_time_hours: 1,
        quick_memory_gb: 16,
        gpu_labels: ['process_gpu']
    ]
    
    // Partition fallback configuration
    partition_fallbacks = [
        bigmem: ['compute'],
        gpu: ['compute'],
        quick: ['compute'],
        compute: []
    ]
    
    // Custom partition mapping (user-defined strategy)
    custom_partition_mapping = [:]
    
    // Additional cluster options
    custom_cluster_options = []
    
    // Tool-specific parameters
    // fastp tool requirements:
    // - fastp (for trimming)
    // - You can add fastp-specific parameters here if needed
    // Example: fastp_extra = "--qualified_quality_phred 20 --length_required 50"

    // Visualization tool requirements:
    // - samtools (for BAM/coverage)
    // - python3 with matplotlib and seaborn
    // - FastTree (for phylogeny)
    // - R (for VirFinder)
}

// Include base configuration with standardized resource profiles
includeConfig 'nextflow/configs/base.config'

// Include validation configuration
includeConfig 'nextflow/configs/validation.config'

// Include environment management configuration
includeConfig 'nextflow/configs/environment.config'

// Include performance optimization configuration
includeConfig 'nextflow/configs/performance_optimization.config'

// Enhanced default configuration
process {
    // Enhanced error handling with specific exit codes
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = { params.max_retry_scaling ?: 3 }
    maxForks = { params.max_forks ?: 10 }
    
    // Dynamic resource allocation based on profile
    cpus = { params.resource_profile == 'local' ? 2 : 4 }
    memory = { params.resource_profile == 'local' ? '4.GB' : '8.GB' }
    time = '2.h'
}

// Local profile
profiles {
    local {
        process.executor = 'local'  // Use the local executor
        executor {
            name = 'local'
            cpus = params.max_cores
        }
       includeConfig 'nextflow/configs/local.config'
    }

    slurm {
        process.executor = 'slurm'  // Use SLURM executor
        executor {
            name = 'slurm'
            queueSize = 100         // Maximum number of jobs in the queue
        }
        process {
            queue = params.queue ?: 'compute'         // SLURM queue/partition
            cpus = 40               // Default to 40 CPUs per job
            time = '12h'            // Default time limit of 72 hours
            memory = '250GB'
        }
        
        includeConfig 'nextflow/configs/slurm.config'
    }

    conda {
        conda.enabled = true
        
        // Environment configuration is handled by environment.config
        // which automatically selects unified or per-process environments
        // based on params.env_mode
    }

    docker {
        process.container = 'metanextviro:latest'
        docker.enabled = true
        docker.runOptions = '-u \\$(id -u):\\$(id -g)'
    }

    singularity {
        singularity.enabled = true
        process.container = 'docker://metanextviro:latest'
    }
}
