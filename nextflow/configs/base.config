/*
 * Base Configuration Template
 * Provides standardized resource profiles and dynamic allocation logic
 * This configuration is included by all profile-specific configurations
 */

// Global process defaults
process {
    errorStrategy = 'retry'
    maxRetries = 3
    maxForks = 10
    
    // Default resource allocation with retry scaling
    cpus = { 2 * task.attempt }
    memory = { 4.GB * task.attempt }
    time = { 2.h * task.attempt }
    
    // Standardized process labels with dynamic resource scaling
    withLabel: 'process_low' {
        cpus = { check_max(2 * task.attempt, params.max_cpus ?: 4) }
        memory = { check_max(4.GB * task.attempt, params.max_memory ?: '8.GB') }
        time = { check_max(2.h * task.attempt, params.max_time ?: '4.h') }
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    }
    
    withLabel: 'process_medium' {
        cpus = { check_max(4 * task.attempt, params.max_cpus ?: 8) }
        memory = { check_max(8.GB * task.attempt, params.max_memory ?: '16.GB') }
        time = { check_max(4.h * task.attempt, params.max_time ?: '8.h') }
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    }
    
    withLabel: 'process_high' {
        cpus = { check_max(8 * task.attempt, params.max_cpus ?: 16) }
        memory = { check_max(16.GB * task.attempt, params.max_memory ?: '32.GB') }
        time = { check_max(8.h * task.attempt, params.max_time ?: '16.h') }
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    }
    
    withLabel: 'process_memory_intensive' {
        cpus = { check_max(4 * task.attempt, params.max_cpus ?: 8) }
        memory = { check_max(32.GB * task.attempt, params.max_memory ?: '64.GB') }
        time = { check_max(12.h * task.attempt, params.max_time ?: '24.h') }
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    }
    
    withLabel: 'process_gpu' {
        cpus = { check_max(4 * task.attempt, params.max_cpus ?: 8) }
        memory = { check_max(16.GB * task.attempt, params.max_memory ?: '32.GB') }
        time = { check_max(8.h * task.attempt, params.max_time ?: '16.h') }
        accelerator = 1
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    }
    
    withLabel: 'process_quick' {
        cpus = { check_max(1 * task.attempt, params.max_cpus ?: 2) }
        memory = { check_max(2.GB * task.attempt, params.max_memory ?: '4.GB') }
        time = { check_max(30.m * task.attempt, params.max_time ?: '1.h') }
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    }
}

// Resource validation and utility functions
def check_max(obj, max_val) {
    if (obj instanceof nextflow.util.MemoryUnit) {
        def max_memory = max_val instanceof String ? max_val.toMemory() : max_val
        return obj > max_memory ? max_memory : obj
    } else if (obj instanceof nextflow.util.Duration) {
        def max_time = max_val instanceof String ? max_val.toDuration() : max_val
        return obj > max_time ? max_time : obj
    } else {
        return obj > max_val ? max_val : obj
    }
}

// Configuration validation parameters
params {
    // Resource limits for validation
    max_cpus = null
    max_memory = null
    max_time = null
    
    // Resource profile selection
    resource_profile = 'standard'
    
    // Dynamic scaling options
    enable_retry_scaling = true
    max_retry_scaling = 3
    
    // Validation options
    validate_resources = true
    strict_validation = false
}