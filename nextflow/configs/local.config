/*
 * Local execution configuration
 * Optimized for workstation environments
 */

// Include base configuration
includeConfig 'base.config'

// Local executor settings
process.executor = "local"

// Local-specific resource limits
params {
    max_cpus = Runtime.runtime.availableProcessors()
    max_memory = "${(Runtime.runtime.maxMemory() / (1024 * 1024 * 1024) * 0.8) as int}.GB"
    max_time = '24.h'
    
    // Local-specific settings
    resource_profile = 'local'
    enable_retry_scaling = true
    max_retry_scaling = 2  // Conservative scaling for local execution
}

// Override base configuration for local constraints
process {
    maxForks = { Math.min(params.max_cpus ?: 4, 4) }  // Limit parallel processes on local
    
    withLabel: 'process_low' {
        cpus = { check_max(2 * task.attempt, 2) }
        memory = { check_max(4.GB * task.attempt, '8.GB') }
        time = { check_max(2.h * task.attempt, '4.h') }
    }
    
    withLabel: 'process_medium' {
        cpus = { check_max(4 * task.attempt, params.max_cpus ? params.max_cpus.intdiv(2) : 4) }
        memory = { check_max(8.GB * task.attempt, '16.GB') }
        time = { check_max(4.h * task.attempt, '8.h') }
    }
    
    withLabel: 'process_high' {
        cpus = { check_max(6 * task.attempt, params.max_cpus ?: 8) }
        memory = { check_max(16.GB * task.attempt, '32.GB') }
        time = { check_max(8.h * task.attempt, '16.h') }
    }
    
    withLabel: 'process_memory_intensive' {
        cpus = { check_max(4 * task.attempt, params.max_cpus ? params.max_cpus.intdiv(2) : 4) }
        memory = { check_max(24.GB * task.attempt, params.max_memory ?: '48.GB') }
        time = { check_max(12.h * task.attempt, '24.h') }
    }
}